public with sharing class MaintenanceRequestHelperTest {
    
    // Definimos constantes para usar en los tests
    private static final string STATUS_NEW = 'New';
    private static final string WORKING = 'Working';
    private static final string CLOSED = 'Closed';
    private static final string REPAIR = 'Repair';
    private static final string REQUEST_ORIGIN = 'Web';
    private static final string REQUEST_TYPE = 'Routine Maintenance';
    private static final string REQUEST_SUBJECT = 'Testing subject';
    
    // Creamos un vehículo
    private static Vehicle__c createVehicle(){
        Vehicle__c Vehicle = new Vehicle__C(name = 'SuperTruck');
        return Vehicle;
    }
    
    // Creamos un equipo
    private static Product2 createEq(){
        product2 equipment = new product2(name = 'SuperEquipment',
                                         lifespan_months__C = 10,
                                         maintenance_cycle__C = 10,
                                         replacement_part__c = true);
        return equipment;
    }
    
    // Creamos una solicitud de mantenimiento
    private static Case createMaintenanceRequest(id vehicleId, id equipmentId){
        case cs = new case(Type=REPAIR,
                          Status=STATUS_NEW,
                          Origin=REQUEST_ORIGIN,
                          Subject=REQUEST_SUBJECT,
                          Equipment__c=equipmentId,
                          Vehicle__c=vehicleId);
        return cs;
    }
    
    // Creamos una pieza de trabajo de mantenimiento
    private static Equipment_Maintenance_Item__c createWorkPart(id equipmentId,id requestId){
        Equipment_Maintenance_Item__c wp = new Equipment_Maintenance_Item__c(Equipment__c = equipmentId,
                                                                            Maintenance_Request__c = requestId);
        return wp;
    }
    
    
    @istest
    private static void testMaintenanceRequestPositive(){
        // Creamos y guardamos un vehículo en la base de datos
        Vehicle__c vehicle = createVehicle();
        insert vehicle;
        id vehicleId = vehicle.Id;
        
        // Creamos y guardamos un equipo en la base de datos
        Product2 equipment = createEq();
        insert equipment;
        id equipmentId = equipment.Id;
        
        // Creamos y guardamos una solicitud de mantenimiento en la base de datos
        case somethingToUpdate = createMaintenanceRequest(vehicleId,equipmentId);
        insert somethingToUpdate;
        
        // Creamos y guardamos una pieza de trabajo de mantenimiento en la base de datos
        Equipment_Maintenance_Item__c workP = createWorkPart(equipmentId,somethingToUpdate.id);
        insert workP;
        
        // Iniciamos el test
        test.startTest();
        
        // Cambiamos el estado de la solicitud de mantenimiento a cerrado
        somethingToUpdate.status = CLOSED;
        update somethingToUpdate;
        
        // Terminamos el test
        test.stopTest();
        
        // Buscamos la solicitud de mantenimiento en la base de datos y comprobamos que se haya actualizado correctamente
        Case newReq = [Select id, subject, type, Equipment__c, Date_Reported__c, Vehicle__c, Date_Due__c
                      from case
                      where status =:STATUS_NEW];
        
        // Buscamos la pieza de trabajo en la base de datos y comprobamos que se haya creado correctamente
        Equipment_Maintenance_Item__c workPart = [select id
                                                 from Equipment_Maintenance_Item__c
                                                 where Maintenance_Request__c =:newReq.Id];
        
        // Comprobamos que los resultados sean los esperados
        system.assert(workPart != null);
        system.assert(allRequest.size() == 1);
    }
    
    // Este método prueba el procesamiento de solicitudes de mantenimiento en masa
    @istest
    private static void testMaintenanceRequestBulk(){
        // Se crean listas vacías para cada tipo de objeto que se necesita
        list<Vehicle__C> vehicleList = new list<Vehicle__C>();
        list<Product2> equipmentList = new list<Product2>();
        list<Equipment_Maintenance_Item__c> workPartList = new list<Equipment_Maintenance_Item__c>();
        list<case> requestList = new list<case>();
        list<id> oldRequestIds = new list<id>();
        
        // Se crean 300 vehículos y equipos, y se insertan en la base de datos
        for(integer i = 0; i < 300; i++){
            vehicleList.add(createVehicle());
            equipmentList.add(createEq());
        }
        insert vehicleList;
        insert equipmentList;
        
        // Se crean 300 solicitudes de mantenimiento, una para cada vehículo y equipo, y se insertan en la base de datos
        for(integer i = 0; i < 300; i++){
            requestList.add(createMaintenanceRequest(vehicleList.get(i).id, equipmentList.get(i).id));
        }
        insert requestList;
        
        // Se crean 300 partes de trabajo, una para cada solicitud de mantenimiento, y se insertan en la base de datos
        for(integer i = 0; i < 300; i++){
            workPartList.add(createWorkPart(equipmentList.get(i).id, requestList.get(i).id));
        }
        insert workPartList;
        
        // Se actualizan todas las solicitudes de mantenimiento para que tengan el estado CERRADO y se agregan sus Id a una lista
        test.startTest();
        for(case req : requestList){
            req.Status = CLOSED;
            oldRequestIds.add(req.Id);
        }
        update requestList;
        test.stopTest();
        
        // Se seleccionan todas las solicitudes de mantenimiento que tengan el estado NUEVO y se guardan en una lista
        list<case> allRequests = [select id
                                from case
                                where status =: STATUS_NEW];
        
        // Se seleccionan todas las partes de trabajo que correspondan a las solicitudes de mantenimiento actualizadas y se guardan en una lista
        list<Equipment_Maintenance_Item__c> workParts = [select id
                                                        from Equipment_Maintenance_Item__c
                                                        where Maintenance_Request__c in: oldRequestIds];
        
        // Se verifica que la lista de solicitudes de mantenimiento nuevas tenga un tamaño de 300
        system.assert(allRequests.size() == 300);
    }
}